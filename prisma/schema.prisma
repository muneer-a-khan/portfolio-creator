generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String             @id @default(cuid()) @db.Uuid
  email        String             @unique
  passwordHash String?
  stripeId     String?
  createdAt    DateTime           @default(now()) @db.Timestamptz(6)
  accounts     Account[]
  settings     PortfolioSettings?
  projects     Project[]
  sessions     Session[]
}

model Project {
  id          String   @id @default(cuid())
  userId      String   @db.Uuid
  title       String
  description String
  githubLink  String?
  fileUrl     String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([userId])
}

model PortfolioSettings {
  id        String  @id @default(cuid())
  userId    String  @unique @db.Uuid
  theme     String  @default("default")
  layout    String  @default("standard")
  aboutMe   String  @default("")
  linkedIn  String?
  github    String?
  resumeUrl String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
}
