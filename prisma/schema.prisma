generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Restored directUrl, though it might need to be commented out if env var is missing
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  name         String?
  email        String        @unique // Kept as non-optional for now
  emailVerified DateTime?
  image        String?
  passwordHash String?       // Assuming this is for potential credentials provider, keep it
  stripeId     String?
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  accounts     Account[]
  portfolios   Portfolio[] // Relation to Portfolio
  sessions     Session[]
}

model Portfolio {
  id            String    @id @default(cuid())
  userId        String    @db.Uuid
  userInfo      Json      // UserInfo object
  socialLinks   Json[]    // Array of SocialLink objects
  projects      Json[]    // Array of Project objects
  themeId       String    @default("default")
  layoutId      String    @default("standard")
  customCss     String?
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
}
