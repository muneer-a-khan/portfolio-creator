generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Placeholder for local dev, env vars needed for actual deployment
  // provider  = "postgresql"
  // url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Temporarily removed for db push
}

model User {
  id           String             @id @default(uuid()) // Removed @db.Uuid
  email        String             @unique
  passwordHash String?
  stripeId     String?
  createdAt    DateTime           @default(now()) // Removed @db.Timestamptz(6)
  accounts     Account[]
  portfolios Portfolio[] // Relation to Portfolio
  sessions     Session[]
}

model Portfolio {
  id            String    @id @default(cuid())
  userId        String    // Removed @db.Uuid
  userInfo      Json      // Store UserInfo object { name: string, professionalTitle: string, aboutMe: string, profilePictureUrl?: string }
  socialLinks   Json      // Store array of SocialLink objects { platform: string, url: string } - Changed from Json[]
  projects      Json      // Store array of Project objects { name: string, description: string, repositoryUrl?: string, liveUrl?: string, technologies: string[] } - Changed from Json[]
  themeId       String    @default("default")
  layoutId      String    @default("standard")
  customCss     String?
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId]) // Assuming one portfolio per user for now, similar to PortfolioSettings
}

model Account {
  id                String  @id @default(cuid())
  userId            String  // Removed @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Removed onUpdate & map

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   // Removed @db.Uuid
  expires      DateTime // Removed @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Removed onUpdate & map

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime // Removed @db.Timestamptz(6)

  @@unique([identifier, token])
}
